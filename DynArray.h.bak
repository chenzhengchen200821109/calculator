#if !defined DynArray_h
#define DynArray_h

#include <cassert>

template <typename T>
class DynArray
{
    enum { initDynArray = 8 };
    public:
        explicit DynArray(T const valDefault);
        ~DynArray();
        void Set(int i, T const val);
        T operator[](int i) const;
        T& operator[](int i);
        bool InRange(int i) const { return i < _capacity; }
    private:
        void Grow(int i);
        T *_arr;
        int _capacity;
        T const _valDefault;
};

template<typename T>
DynArray<T>::DynArray(T const valDefault) : _capacity(initDynArray), _valDefault(valDefault)
{
    _arr = new T[initDynArray];
    for (int i = 0; i < initDynArray; ++i)
        _arr[i] = _valDefault;
}

template<typename T>
DynArray<T>::~DynArray()
{
    delete [] _arr;
}

template<typename T>
void DynArray<T>::Set(int i, T const value)
{
    if (i >= _capacity)
        Grow(i);
    _arr[i] = value;
}

template<typename T>
inline T DynArray<T>::operator[](int i) const
{
    assert(i < _capacity);
    return _arr[i];
}

template<typename T>
inline T& DynArray<T>::operator[](int i)
{
    assert(i < _capacity);
    return _arr[i];
}

template<typename T>
void DynArray<T>::Grow(int idxMax)
{
    int newSize = 2 * _capacity;
    if (idxMax >= newSize)
        newSize = idxMax + 1;
    T* arrNew = new T[newSize];
    int i;
    for (i = 0; i < _capacity; ++i)
        arrNew[i] = _arr[i];
    for (; i < newSize; ++i)
        arrNew[i] = _valDefault;
    _capacity = newSize;
    delete [] _arr;
    _arr = arrNew;
}

#endif
